#BlueJ class context
comment0.target=VigenereBreaker
comment1.params=message\ whichSlice\ totalSlices
comment1.target=java.lang.String\ sliceString(java.lang.String,\ int,\ int)
comment10.params=
comment10.target=void\ breakVigenere3()
comment10.text=\r\n\ Modify\ your\ breakVigenere\ method\ to\ read\ many\ dictionaries\ instead\ of\ just\ one.\ In\ particular,\ you\ should\ make\ a\r\n\ HashMap\ mapping\ Strings\ to\ a\ HashSet\ of\ Strings\ that\ will\ map\ each\ language\ name\ to\ the\ set\ of\ words\ in\ its\ dictionary.\r\n\ Then,\ you\ will\ want\ to\ read\ (using\ your\ readDictionary\ method)\ each\ of\ the\ dictionaries\ that\ we\ have\ provided\ (Danish,\r\n\ Dutch,\ English,\ French,\ German,\ Italian,\ Portuguese,\ and\ Spanish)\ and\ store\ the\ words\ in\ the\ HashMap\ you\ made.\ Reading\ \r\n\ all\ the\ dictionaries\ may\ take\ a\ little\ while,\ so\ you\ might\ add\ some\ print\ statements\ to\ reassure\ you\ that\ your\ program\ is\ \r\n\ making\ progress.\ Once\ you\ have\ made\ that\ change,\ you\ will\ want\ to\ call\ breakForAllLangs,\ passing\ in\ the\ message\ (the\ \r\n\ code\ to\ read\ in\ the\ message\ is\ unchanged\ from\ before),\ and\ the\ HashMap\ you\ just\ created.\r\n
comment2.params=encrypted\ klength\ mostCommon
comment2.target=int[]\ tryKeyLength(java.lang.String,\ int,\ char)
comment3.params=
comment3.target=void\ breakVigenere()
comment4.params=fr
comment4.target=java.util.HashSet\ readDictionary(edu.duke.FileResource)
comment4.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ readDictionary,\ which\ has\ one\ parameter\u2014a\ FileResource\ fr.\ This\ \r\n\ method\ should\ first\ make\ a\ new\ HashSet\ of\ Strings,\ then\ read\ each\ line\ in\ fr\ (which\ should\ contain\ exactly\ one\ word\ per\r\n\ line),\ convert\ that\ line\ to\ lowercase,\ and\ put\ that\ line\ into\ the\ HashSet\ that\ you\ created.\ The\ method\ should\ then\ return\ the\r\n\ HashSet\ representing\ the\ words\ in\ a\ dictionary.\ All\ the\ dictionary\ files,\ including\ the\ English\ dictionary\ file,\ are\ included\ in\r\n\ the\ starter\ program\ you\ download.\ They\ are\ inside\ the\ folder\ called\ \u2018dictionaries\u2019.\r\n
comment5.params=message\ dictionary
comment5.target=int\ countWords(java.lang.String,\ java.util.HashSet)
comment5.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ countWords,\ which\ has\ two\ parameters\u2014a\ String\ message,\ and\ a\ \r\n\ HashSet\ of\ Strings\ dictionary.\ This\ method\ should\ split\ the\ message\ into\ words\ (use\ .split(\u201C\\\\W+\u201D),\ which\ returns\ a\ String\r\n\ array),\ iterate\ over\ those\ words,\ and\ see\ how\ many\ of\ them\ are\ \u201Creal\ words\u201D\u2014that\ is,\ how\ many\ appear\ in\ the\ dictionary.\ \r\n\ Recall\ that\ the\ words\ in\ dictionary\ are\ lowercase.\ This\ method\ should\ return\ the\ integer\ count\ of\ how\ many\ valid\ words\ it\ found.\r\n
comment6.params=encrypted\ dictionary
comment6.target=java.lang.String\ breakForLanguage(java.lang.String,\ java.util.HashSet)
comment6.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ breakForLanguage,\ which\ has\ two\ parameters\u2014a\ String\ \r\n\ encrypted,\ and\ a\ HashSet\ of\ Strings\ dictionary.\ This\ method\ should\ try\ all\ key\ lengths\ from\ 1\ to\ 100\ (use\ your\r\n\ tryKeyLength\ method\ to\ try\ one\ particular\ key\ length)\ to\ obtain\ the\ best\ decryption\ for\ each\ key\ length\ in\ that\ range.\ For\r\n\ each\ key\ length,\ your\ method\ should\ decrypt\ the\ message\ (using\ VigenereCipher\u2019s\ decrypt\ method\ as\ before),\ and\ count\r\n\ how\ many\ of\ the\ \u201Cwords\u201D\ in\ it\ are\ real\ words\ in\ English,\ based\ on\ the\ dictionary\ passed\ in\ (use\ the\ countWords\ method\r\n\ you\ just\ wrote).\ This\ method\ should\ figure\ out\ which\ decryption\ gives\ the\ largest\ count\ of\ real\ words,\ and\ return\ that\r\n\ String\ decryption.\ Note\ that\ there\ is\ nothing\ special\ about\ 100;\ we\ will\ just\ give\ you\ messages\ with\ key\ lengths\ in\ the\ range\r\n\ 1\u2013100.\ If\ you\ did\ not\ have\ this\ information,\ you\ could\ iterate\ all\ the\ way\ to\ encrypted.length().\ Your\ program\ would\ just\ \r\n\ take\ a\ bit\ longer\ to\ run.\r\n
comment7.params=
comment7.target=void\ breakVigenere2()
comment7.text=\r\n\ Create\ a\ new\ FileResource\ using\ its\ default\ constructor\ (which\ displays\ a\ dialog\ for\ you\ to\ select\ a\ file\ to\ decrypt).\r\n\ Use\ that\ FileResource\u2019s\ asString\ method\ to\ read\ the\ entire\ contents\ of\ the\ file\ into\ a\ String.\r\n\ You\ should\ make\ a\ new\ FileResource\ to\ read\ from\ the\ English\ dictionary\ file\ that\ we\ have\ provided.\ [Use\ the\ tryKeyLength\ method\ that\ you\ just\ wrote\ to\ find\ the\ key\ for\ the\ message\ you\ read\ in.\ For\ now,\ you\ should\ just\ pass\ \u2018e\u2019\ for\ mostCommon.]\r\n\ You\ should\ use\ your\ readDictionary\ method\ to\ read\ the\ contents\ of\ that\ file\ into\ a\ HashSet\ of\ Strings.\ [You\ should\ create\ a\ new\ VigenereCipher,\ passing\ in\ the\ key\ that\ tryKeyLength\ found\ for\ you.]\r\n\ You\ should\ use\ the\ breakForLanguage\ method\ that\ you\ just\ wrote\ to\ decrypt\ the\ encrypted\ message.\ [You\ should\ use\ a\ VigenereCipher\ object\ to\ decrypt\ the\ encrypted\ message.]\r\n\ Finally,\ you\ should\ print\ out\ the\ decrypted\ message\!\r\n\ Test\ this\ method\ on\ the\ text\ file\ athens_keyflute.txt.\ The\ first\ line\ should\ be\ \u201CSCENE\ II.\ Athens.\ QUINCE'S\ house\u201D,\ and\ the\ key\ is\ \u201Cflute\u201D,\ or\ {5,\ 11,\ 20,\ 19,\ 4}.\ This\ file\ contains\ 376\ valid\ words\ out\ of\ 386\ (total\ word\ count\ ignores\ whitespace).\ \r\n
comment8.params=dictionary
comment8.target=char\ mostCommonCharIn(java.util.HashSet)
comment8.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ mostCommonCharIn,\ which\ has\ one\ parameter\u2014a\ HashSet\ of\r\n\ Strings\ dictionary.\ This\ method\ should\ find\ out\ which\ character,\ of\ the\ letters\ in\ the\ English\ alphabet,\ appears\ most\ often\ \r\n\ in\ the\ words\ in\ dictionary.\ It\ should\ return\ this\ most\ commonly\ occurring\ character.\ Remember\ that\ you\ can\ iterate\ over\ a\r\n\ HashSet\ of\ Strings\ with\ a\ for-each\ style\ for\ loop.\r\n
comment9.params=encrypted\ languages
comment9.target=void\ breakForAllLangs(java.lang.String,\ java.util.HashMap)
comment9.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ breakForAllLangs,\ which\ has\ two\ parameters\u2014a\ String\ encrypted,\r\n\ and\ a\ HashMap,\ called\ languages,\ mapping\ a\ String\ representing\ the\ name\ of\ a\ language\ to\ a\ HashSet\ of\ Strings\ \r\n\ containing\ the\ words\ in\ that\ language.\ Try\ breaking\ the\ encryption\ for\ each\ language,\ and\ see\ which\ gives\ the\ best\ results\!\r\n\ Remember\ that\ you\ can\ iterate\ over\ the\ languages.keySet()\ to\ get\ the\ name\ of\ each\ language,\ and\ then\ you\ can\ use\ .get()\r\n\ to\ look\ up\ the\ corresponding\ dictionary\ for\ that\ language.\ You\ will\ want\ to\ use\ the\ breakForLanguage\ and\ countWords\r\n\ methods\ that\ you\ already\ wrote\ to\ do\ most\ of\ the\ work\ (it\ is\ slightly\ inefficient\ to\ re-count\ the\ words\ here,\ but\ it\ is\ simpler,\r\n\ and\ the\ inefficiency\ is\ not\ significant).\ You\ will\ want\ to\ print\ out\ the\ decrypted\ message\ as\ well\ as\ the\ language\ that\ you\ \r\n\ identified\ for\ the\ message.\r\n
numComments=11
