#BlueJ class context
comment0.target=LogAnalyzer
comment1.params=
comment1.target=LogAnalyzer()
comment10.params=mapIpAddress
comment10.target=int\ mostNumberVisitsByIP(java.util.HashMap)
comment10.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ method\ mostNumberVisitsByIP,\ which\ has\ one\ parameter,\ a\ HashMap<String,\ Integer>\r\n\ that\ maps\ an\ IP\ address\ to\ the\ number\ of\ times\ that\ IP\ address\ appears\ in\ the\ web\ log\ file.\ This\ method\ returns\ the\ \r\n\ maximum\ number\ of\ visits\ to\ this\ website\ by\ a\ single\ IP\ address.\ For\ example,\ the\ call\ mostNumberVisitsByIP\ on\ a\r\n\ HashMap\ formed\ using\ the\ file\ weblog3-short_log\ returns\ 3.\r\n
comment11.params=mapIpAddress
comment11.target=java.util.ArrayList\ iPsMostVisits(java.util.HashMap)
comment11.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ method\ iPsMostVisits,\ which\ has\ one\ parameter,\ a\ HashMap<String,\ Integer>\ that\ \r\n\ maps\ an\ IP\ address\ to\ the\ number\ of\ times\ that\ IP\ address\ appears\ in\ the\ web\ log\ file.\ This\ method\ returns\ an\ ArrayList\r\n\ of\ Strings\ of\ IP\ addresses\ that\ all\ have\ the\ maximum\ number\ of\ visits\ to\ this\ website.\ For\ example,\ the\ call\r\n\ iPsMostVisits\ on\ a\ HashMap\ formed\ using\ the\ file\ weblog3-short_log\ returns\ the\ ArrayList\ with\ these\ two\ IP\ addresses,\ \r\n\ 61.15.121.171\ and\ \ 84.133.195.161.\ Both\ of\ them\ visited\ the\ site\ three\ times,\ which\ is\ the\ maximum\ number\ of\ times\ any\ \r\n\ IP\ address\ visited\ the\ site.\ \r\n
comment12.params=
comment12.target=java.util.HashMap\ iPsForDays()
comment12.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ method\ iPsForDays,\ which\ has\ no\ parameters.\ This\ method\ returns\ a\r\n\ HashMap<String,\ ArrayList<String>>\ that\ uses\ records\ and\ maps\ days\ from\ web\ logs\ to\ an\ ArrayList\ of\ IP\ addresses\ that\ \r\n\ occurred\ on\ that\ day\ (including\ repeated\ IP\ addresses).\ A\ day\ is\ in\ the\ format\ \u201CMMM\ DD\u201D\ where\ MMM\ is\ the\ first\ three\r\n\ characters\ of\ the\ month\ name\ with\ the\ first\ letter\ capital\ and\ the\ others\ in\ lowercase,\ and\ DD\ is\ the\ day\ in\ two\ digits\ \r\n\ (examples\ are\ \u201CDec\ 05\u201D\ and\ \u201CApr\ 22\u201D).\ For\ example,\ for\ the\ file\ weblog3-short_log,\ after\ building\ this\ HashMap,\ if\ you\r\n\ print\ it\ out,\ you\ will\ see\ that\ Sep\ 14\ maps\ to\ one\ IP\ address,\ Sep\ 21\ maps\ to\ four\ IP\ addresses,\ and\ Sep\ 30\ maps\ to\ \r\n\ five\ IP\ addresses.\r\n
comment13.params=mapDays
comment13.target=java.lang.String\ dayWithMostIPVisits(java.util.HashMap)
comment13.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ method\ dayWithMostIPVisits,\ which\ has\ one\ parameter\ that\ is\ a\r\n\ HashMap<String,\ ArrayList<String>>\ that\ uses\ records\ and\ maps\ days\ from\ web\ logs\ to\ an\ ArrayList\ of\ IP\ addresses\ that\ \r\n\ occurred\ on\ that\ day.\ This\ method\ returns\ the\ day\ that\ has\ the\ most\ IP\ address\ visits.\ If\ there\ is\ a\ tie,\ then\ return\ \r\n\ any\ such\ day.\ For\ example,\ if\ you\ use\ the\ file\ weblog3-short_log,\ then\ this\ method\ should\ return\ the\ day\ most\ visited\ \r\n\ as\ Sep\ 30.\r\n
comment14.params=mapDays\ day
comment14.target=java.util.ArrayList\ iPsWithMostVisitsOnDay(java.util.HashMap,\ java.lang.String)
comment14.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ method\ iPsWithMostVisitsOnDay,\ which\ has\ two\ parameters\u2014the\ first\ one\ is\ a\ \r\n\ HashMap<String,\ ArrayList<String>>\ that\ uses\ records\ and\ maps\ days\ from\ web\ logs\ to\ an\ ArrayList\ of\ IP\ addresses\ that\ \r\n\ occurred\ on\ that\ day,\ and\ the\ second\ parameter\ is\ a\ String\ representing\ a\ day\ in\ the\ format\ \u201CMMM\ DD\u201D\ described\ above.\ \r\n\ This\ method\ returns\ an\ ArrayList<String>\ of\ IP\ addresses\ that\ had\ the\ most\ accesses\ on\ the\ given\ day.\ For\ example,\ if\ \r\n\ you\ use\ the\ file\ weblog3-short_log,\ and\ the\ parameter\ for\ the\ day\ is\ \u201CSep\ 30\u201D,\ then\ there\ are\ two\ IP\ addresses\ in\ the\ \r\n\ ArrayList\ returned\:\ 61.15.121.171\ and\ 177.4.40.87.\ Hint\:\ This\ method\ should\ call\ another\ method\ you\ have\ written.\r\n
comment2.params=filename
comment2.target=void\ readFile(java.lang.String)
comment3.params=
comment3.target=java.util.HashMap\ countVisitsPerIP()
comment4.params=
comment4.target=void\ printAll()
comment5.params=
comment5.target=int\ ipAnalyzer()
comment6.params=
comment6.target=int\ countUniqueIPs()
comment6.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ method\ countUniqueIPs\ that\ has\ no\ parameters.\ This\ method\ should\ return\ an\r\n\ integer\ representing\ the\ number\ of\ unique\ IP\ addresses.\ It\ should\ also\ assume\ that\ the\ instance\ variable\ records\r\n\ already\ has\ its\ ArrayList\ of\ Strings\ read\ in\ from\ a\ file,\ and\ should\ access\ records\ in\ computing\ this\ value.\r\n\ For\ help,\ refer\ to\ the\ lectures\ in\ this\ lesson\ on\ the\ unique\ IP\ algorithm\ and\ code.\r\n
comment7.params=num
comment7.target=void\ printAllHigherThanNum(int)
comment7.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ void\ method\ printAllHigherThanNum\ that\ has\ one\ integer\ parameter\ num.\ This\r\n\ method\ should\ examine\ all\ the\ web\ log\ entries\ in\ records\ and\ print\ those\ LogEntrys\ that\ have\ a\ status\ code\ greater\ than\r\n\ num.\ Be\ sure\ to\ add\ code\ in\ the\ Tester\ class\ to\ test\ out\ this\ method\ with\ the\ file\ short-test_log.\r\n
comment8.params=someday
comment8.target=java.util.ArrayList\ uniqueIPVisitsOnDay(java.lang.String)
comment8.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ method\ uniqueIPVisitsOnDay\ that\ has\ one\ String\ parameter\ named\ someday\ in\ the\r\n\ format\ \u201CMMM\ DD\u201D\ where\ MMM\ is\ the\ first\ three\ characters\ of\ the\ month\ name\ with\ the\ first\ letter\ capitalized\ and\ the\ \r\n\ others\ in\ lowercase,\ and\ DD\ is\ the\ day\ in\ two\ digits\ (examples\ are\ \u201CDec\ 05\u201D\ and\ \u201CApr\ 22\u201D).\ This\ method\ accesses\ the\ web\ \r\n\ logs\ in\ records\ and\ returns\ an\ ArrayList\ of\ Strings\ of\ unique\ IP\ addresses\ that\ had\ access\ on\ the\ given\ day.\ (Note\ that\ the\r\n\ dates\ in\ LogEntrys\ are\ stored\ as\ a\ Date\ object,\ but\ using\ toString\ will\ allow\ you\ to\ access\ the\ characters\ in\ the\ Date.\r\n\ For\ example,\ consider\ that\ d\ is\ a\ Date.\ String\ str\ \=\ d.toString();\ allows\ you\ to\ now\ use\ a\ String\ representation\ of\ the\r\n\ date.)\ Be\ sure\ to\ test\ your\ program\ with\ code\ in\ the\ Tester\ class.\ \ Using\ the\ file\ weblog-short_log\ you\ should\ see\ that\r\n\ the\ call\ to\ uniqueIPVisitsOnDay(\u201CSep\ 14\u201D)\ returns\ an\ ArrayList\ of\ 2\ items\ and\ uniqueIPVisitsOnDay(\u201CSep\ 30\u201D)\ returns\ an\ \r\n\ ArrayList\ of\ 3\ items.\ \r\n
comment9.params=low\ high
comment9.target=int\ countUniqueIPsInRange(int,\ int)
comment9.text=\r\n\ In\ the\ LogAnalyzer\ class,\ write\ the\ method\ countUniqueIPsInRange\ that\ has\ two\ integer\ parameters\ named\ low\ and\ high.\r\n\ This\ method\ returns\ the\ number\ of\ unique\ IP\ addresses\ in\ records\ that\ have\ a\ status\ code\ in\ the\ range\ from\ low\ to\ high,\ \r\n\ inclusive.\ Be\ sure\ to\ test\ your\ program\ on\ several\ ranges.\ For\ example,\ using\ the\ file\ short-test_log,\ the\ call\ \r\n\ countUniqueIPsInRange(200,299)\ returns\ 4,\ as\ there\ are\ four\ unique\ IP\ addresses\ that\ have\ a\ status\ code\ from\ 200\ to\ 299.\r\n\ The\ call\ countUniqueIPsInRange(300,399)\ returns\ 2.\ In\ this\ case,\ note\ that\ there\ are\ three\ entries\ in\ the\ file\ that\ have\r\n\ a\ status\ code\ in\ the\ 300\ range,\ but\ two\ of\ them\ have\ the\ same\ IP\ address.\r\n
numComments=15
